# DANH SÁCH TỐI ƯU DỰ ÁN VANGLANG BUDGET

## A. Loại bỏ thư mục và file dư thừa

- [x] **A1. Xóa thư mục `pages`**
  - Dự án đã chuyển sang App Router của Next.js
  - Xóa toàn bộ file và cấu trúc trong `src/pages`

- [x] **A2. Xóa thư mục `layouts`**
  - Đã được thay thế bằng `src/components/layout`
  - Xóa `src/layouts/MainLayout.tsx`

- [x] **A3. Hợp nhất thư mục `utils` và `lib`**
  - Di chuyển nội dung `utils/formatters.ts` vào `lib/utils.ts` (kiểm tra trùng lặp trước)
  - Cập nhật tất cả import statement trong dự án
  - Xóa thư mục `utils`

- [x] **A4. Xóa thư mục `store`**
  - Đã được thay thế bằng `redux`
  - Xóa `src/store/index.ts` và toàn bộ thư mục

- [x] **A5. Xóa thư mục `features` nếu không còn sử dụng**
  - Kiểm tra xem có file nào trong thư mục này đang được sử dụng không
  - Xóa thư mục nếu đã được thay thế bằng `redux/features`

- [x] **A6. Xóa file `public/index.html`**
  - Next.js tự động tạo HTML, không cần file này

## B. Tổ chức và chuẩn hóa assets

- [x] **B1. Tổ chức lại thư mục hình ảnh**
  - Xem xét và tổ chức lại nội dung trong `public/images/temp`
  - Di chuyển các hình ảnh đang sử dụng vào thư mục chính `public/images`
  - Xóa thư mục `temp` sau khi hoàn thành

- [x] **B2. Tối ưu hóa SVG và biểu tượng**
  - Kiểm tra và tối ưu file SVG trong `public/favicon.svg` và các biểu tượng khác
  - Xem xét việc chuyển đổi một số SVG thành React components nếu cần

- [x] **B3. Tổ chức lại thư mục nội dung JSON**
  - Tạo thư mục `src/content` hoặc `src/data`
  - Di chuyển các file JSON (`pricing.json`, `features.json`, `contact.json`) vào thư mục này
  - Cập nhật tất cả import statement

## C. Tái cấu trúc code

- [ ] **C1. Chuẩn hóa định nghĩa type**
  - Kiểm tra và tạo generic types trong `src/types` cho các interface tương tự nhau
  - Ví dụ: tạo generic `ListProps<T>` để thay thế `ExpenseListProps`, `IncomeListProps`...
  - Cập nhật các component để sử dụng types chung

- [ ] **C2. Kiểm tra và hợp nhất hooks**
  - Đảm bảo không có hook trùng lặp giữa `hooks` và các thư mục khác
  - Tạo custom hook cho những chức năng được sử dụng lặp lại trong nhiều components

## D. Tối ưu hóa performance

- [ ] **D1. Kiểm tra và tối ưu React components**
  - Xác định các component được render không cần thiết
  - Sử dụng `React.memo`, `useMemo`, `useCallback` cho các component/logic phức tạp
  - Đảm bảo tất cả dependencies array chính xác trong các hooks

- [ ] **D2. Tối ưu bundle size**
  - Thêm Next.js Bundle Analyzer để kiểm tra kích thước bundle
  - Tìm và giảm kích thước các dependencies lớn
  - Xem xét các dependencies có thể sử dụng dynamic import

- [ ] **D3. Lazy loading cho components không quan trọng**
  - Áp dụng lazy loading cho các component ít sử dụng hoặc chỉ hiển thị khi cần
  - Đảm bảo UX mượt mà khi sử dụng lazy loading

## E. Kiểm tra và đảm bảo chất lượng

- [ ] **E1. Thêm ESLint rules**
  - Thêm plugin `unused-imports` để phát hiện imports không sử dụng
  - Thêm rule `no-unused-vars` để tìm biến không sử dụng
  - Chạy lint toàn bộ dự án và sửa các cảnh báo

- [ ] **E2. Kiểm tra console.log**
  - Tìm và xóa tất cả `console.log` không cần thiết
  - Thay thế bằng hệ thống logging phù hợp nếu cần

- [ ] **E3. Kiểm tra responsive**
  - Đảm bảo tất cả giao diện hoạt động tốt trên mobile, tablet và desktop
  - Kiểm tra khả năng tiếp cận (a11y) của ứng dụng

- [ ] **E4. Kiểm tra trải nghiệm đa ngôn ngữ**
  - Đảm bảo tất cả chuỗi hiển thị đều nằm trong file ngôn ngữ
  - Kiểm tra chuyển đổi ngôn ngữ mượt mà trên tất cả trang
